{"version":3,"sources":["components/InfoBox.js","components/LineGraph.js","components/Table.js","utils/util.js","components/MapBox.js","App.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","isBlue","isGrey","props","console","log","Card","onClick","className","CardContent","Typography","color","gutterBottom","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","Table","countries","map","country","casesTypeColors","hex","mulitiplier","recovered","deaths","sortData","sortedData","sort","b","prettyPrintStat","stat","showDataOnMap","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","fillColor","Math","sqrt","Popup","style","backgroundImage","flag","Map","zoom","ChangeView","useMap","setView","MapContainer","scrollWheelZoom","TileLayer","attribution","url","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","mapCenter","setMapCenter","setZoom","mapCountries","setMapCountries","setCasesType","isLoading","setLoading","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","isloading","todayRecovered","todayDeaths","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce94f7de.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"../styles/InfoBox.css\";\r\n\r\n\r\nfunction InfoBox({ title, cases, total, active, isRed, isBlue, isGrey, ...props }) {\r\n    console.log(title, active);\r\n    return (\r\n        <Card\r\n            onClick={props.onClick}\r\n            className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"} ${isBlue && \"infoBox--blue\"} ${isGrey && \"infoBox--grey\"}`}\r\n        >\r\n            <CardContent>\r\n                <Typography color=\"textSecondary\" gutterBottom>\r\n                    {title}\r\n                </Typography>\r\n                <h2 className={`infoBox__cases ${isRed && \"infoBox__cases--red\"} ${isBlue && \"infoBox__cases--blue\"} ${isGrey && \"infoBox__cases--grey\"}`}>\r\n                    {cases}\r\n                </h2>\r\n\r\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default InfoBox;","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    // Include a dollar sign in the ticks\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n    for (let date in data.cases) {\r\n        if (lastDataPoint) {\r\n            let newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint,\r\n            };\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n        console.log('Cases Type', casesType)\r\n    }\r\n    return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType, ...props }) {\r\n    const [data, setData] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n                .then((response) => {\r\n                    return response.json();\r\n                })\r\n                .then((data) => {\r\n                    let chartData = buildChartData(data, casesType);\r\n                    setData(chartData);\r\n                    console.log(chartData);\r\n                });\r\n        };\r\n\r\n        fetchData();\r\n    }, [casesType]);\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length > 0 && (\r\n                <Line\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                backgroundColor: \"tomato\",\r\n                                borderColor: \"red\",\r\n                                data: data,\r\n                            },\r\n                        ],\r\n                    }}\r\n                    options={options}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LineGraph;","import React from 'react'\r\nimport '../styles/Table.css'\r\nimport numeral from 'numeral'\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({ country, cases }) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td>\r\n                        <strong>\r\n                            {numeral(cases).format('0,0')}\r\n                        </strong>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        mulitiplier: 800,\r\n    },\r\n\r\n    recovered: {\r\n        hex: \"#185ADB\",\r\n        mulitiplier: 1200,\r\n    },\r\n\r\n    deaths: {\r\n        hex: \"#293B5F\",\r\n        mulitiplier: 2000,\r\n    },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    sortedData.sort((a, b) => b.cases - a.cases);\r\n\r\n    return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n//Draw circles on the map\r\nexport const showDataOnMap = (data, casesType) =>\r\n    data.map((country) => (\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            fillOpacity={0.4}\r\n            pathOptions={{\r\n                color: casesTypeColors[casesType].hex,\r\n                fillColor: casesTypeColors[casesType].hex,\r\n            }}\r\n            radius={\r\n                Math.sqrt(country[casesType] / 10) *\r\n                casesTypeColors[casesType].mulitiplier\r\n            }\r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div\r\n                        className=\"info-flag\"\r\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n                    />\r\n                    <div className=\"info-name\">{country.country}</div>\r\n                    <div className=\"info-confirmed\">\r\n                        Cases: {numeral(country.cases).format(\"0,0\")}\r\n                    </div>\r\n                    <div className=\"info-recovered\">\r\n                        Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n                    </div>\r\n                    <div className=\"info-deaths\">\r\n                        Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n                    </div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ));","import React from \"react\";\r\nimport { MapContainer, TileLayer, useMap } from \"react-leaflet\";\r\nimport \"../styles/MapBox.css\";\r\nimport { showDataOnMap } from \"../utils/util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n    function ChangeView({ center, zoom }) {\r\n        const map = useMap();\r\n        map.setView(center, zoom);\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <MapContainer\r\n            casesType={casesType}\r\n            className=\"map\"\r\n            center={center}\r\n            zoom={zoom}\r\n            scrollWheelZoom={false}\r\n        >\r\n            <ChangeView center={center} zoom={zoom} />\r\n\r\n            <TileLayer\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            {showDataOnMap(countries, casesType)}\r\n        </MapContainer>\r\n    );\r\n}\r\n\r\nexport default Map;","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./components/InfoBox\";\nimport LineGraph from \"./components/LineGraph\";\nimport Table from \"./components/Table\";\nimport MapBox from \"./components/MapBox\";\nimport { sortData, prettyPrintStat } from \"./utils/util\";\nimport \"leaflet/dist/leaflet.css\";\n\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState([34.80746, -40.4796]);\n  const [zoom, setZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    setLoading(true);\n    const countryCode = event.target.value;\n\n    setCountry(countryCode);\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    //https://disease.sh/v3/covid-19/all\n    //https://disease.sh/v3/covid-19/countries/[countryCode]\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        setLoading(false);\n\n        countryCode === \"worldwide\"\n          ? setMapCenter([34.80746, -40.4796])\n          : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setZoom(4);\n      });\n\n    console.log(countryInfo);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1 className='app__header_style' >COVID-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            className=\"infoBox__cases\"\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            total={prettyPrintStat(countryInfo.cases)}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            isloading={isLoading}\n          />\n          <InfoBox\n            isBlue\n            active={casesType === \"recovered\"}\n            className=\"infoBox__recovered\"\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            total={prettyPrintStat(countryInfo.recovered)}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            isloading={isLoading}\n          />\n          <InfoBox\n            isGrey\n            active={casesType === \"deaths\"}\n            className=\"infoBox__deaths\"\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            total={prettyPrintStat(countryInfo.deaths)}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            isloading={isLoading}\n          />\n        </div>\n\n        <MapBox\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={zoom}\n          casesType={casesType}\n        />\n\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">WorldWide new {casesType}</h3>\n\n          <LineGraph\n            className=\"app__graph\"\n            casesType={casesType}\n          />\n\n        </CardContent>\n      </Card>\n    </div >\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}